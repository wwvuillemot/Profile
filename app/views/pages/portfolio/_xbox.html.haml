%div{ class: "#{company.slug}"}
  %a{name: company.slug}
  %ul.tag
    %li{ role: :presentation} senior program manager
  %h2=raw company.headline
  %p.lead
    =render partial: company.to_lead_path
  %p
    When we said we wanted to personalize XboxOne, we meant much more than
    just allowing our customers the ability to select their favorite color.
    For us, personalization meant giving customers quick access to their
    favorites with deep-linked Pins. It meant solving the cold-start problem
    of an engaging experience from Day Zero. And it meant growing that
    experience by adopting to their implicit preferences and likes over time.
    While XboxOne was inarguably built as a game console, we were
    determined to also make it a multi-media platform.
  %p
    As such, when we began to imagine XboxOne, we concentrated our efforts
    on how our customers discover and enjoy content, regardless of whether it
    is a game, a movie, or a song.  Historically, many sites approach the
    problem of a large catalog by slapping on search (aka solve for the
    %i lean-forward
    user intent) and calling it a day, letting you find
    the content.  But that is not enough. Some days you do not know what you
    want (aka
    %i lean-back
    user intent) and you want the content to find
    you.  Again, many sites slap on a taxonomy for customers to browse, but
    this can be unwieldly for a large corpus of content types and genres, not
    to mention that
    %i how
    you construct your taxonomy varies by culture.
    Even when using sophisticated browse approaches — such as
    recommendations or editorial picks — any single approach cannot
    support every user intent.  Our challenge, then, was to figure out how to
    harmonize multiple
    %i discovery vectors
    into a single, cohesive
    experience.
  %p
    Beyond the aforementioned search and browse vectors,  we wanted to
    include a variety of new discovery vectors.  These included editorial
    picks, recommendations, and social suggestions, to name just a few.  We
    knew from experience that each discovery vector worked better for certain
    media-types, and could vary by customer.  We were aware that some
    customers were motivated by top hits, while others would watch a movie a
    friend had watched.  In order for us to truly provide a personalized
    experience, we needed to be able to boost one vector at the expense of
    another based on a customer's behavior. For example, if you tended to
    watch sci-fi movies on Friday nights, we combined this with the fact that
    you converted from a top 10 list better than a recommendation to ensure we
    placed "top 10 sci-fi movies" front and center.
  %p
    This is where I entered the picture. During the design of XboxOne, I
    played a key role in promoting this next-level personalization on both the
    services and experiential sides.  I introduced the abstraction of an
    %i ascriptive spectrum
    that was necessary to support these different
    discovery vectors. More specifically, we created a syntax that allowed one
    side of the spectrum (perscriptive vectors such as Editorial) to be
    interwoven with the other side (descriptive vectors such as
    Recommendations).  I championed — and led the team that eventually
    delivered — the architecture that now powers Xbox Home, Pins, Store,
    and Search.
  %p
    As noted previously, the goal that I set for my team was to find a way
    to bring together any number of disparate discovery vectors (
    %i e.g.
    search, recommendations, top 10, editorial picks) and mix them together in
    a way that allowed us to change (boost or decrease) a signal based upon
    A/B testing.  An additional goal was to do this entirely from the services
    side, thus obviating the need for an XboxOne flash update whenever we
    wanted to change the console experience, as is still the case with
    Xbox360.
  %p
    We achieved these goals to the extent that — from our customers
    perspective — it is now perceived as a single unified
    = succeed "," do
      %i
        user
        experience
